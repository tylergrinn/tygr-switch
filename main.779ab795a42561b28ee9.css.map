{"version":3,"sources":["webpack://@tygr/switch/demo/main.scss","webpack://@tygr/switch/_index.scss"],"names":[],"mappings":"AAEA,eAGE,YACA,yBAGF,KACE,SAGF,KACE,aACA,uBACA,mBAGF,YACE,aACA,sBACA,sBAEA,cACE,WAIF,wBACE,mBACA,gBACA,iBCeE,iLDRF,UACA,aACA,aACA,YACA,UCIE,gMDRF,UACA,aACA,aACA,YACA,UCIE,8NDRF,UACA,aACA,aACA,YACA,UAKF,2BACE,gBACA,sBACA,YACA,sBAEA,iCACE,gCAEF,oCACE,gCAKN,qBACE,GACE,WAIJ,oBACE,KACE,UAEF,GACE,W","file":"main.779ab795a42561b28ee9.css","sourcesContent":["@import '../';\n\nhtml,\nbody,\n#app {\n  height: 100%;\n  background-color: #423d5c;\n}\n\nbody {\n  margin: 0;\n}\n\n#app {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.tygr-login {\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n\n  * {\n    margin: 8px;\n  }\n\n  // Styles applied to all [data-auth] elements\n  [data-auth] {\n    transition: all 0.3s;\n    max-height: 32px;\n    overflow: visible;\n\n    // animation: _fade-in 1s;\n  }\n\n  // Styles applied to [data-auth] elements when state is *INACTIVE*\n  @include switch('auth', login, register, reset-password) {\n    opacity: 0;\n    max-height: 0;\n    margin: 0 8px;\n    border: none;\n    padding: 0;\n\n    // animation: _fade-out 1s forwards;\n  }\n\n  .header button {\n    background: none;\n    border: 1px solid black;\n    padding: 8px;\n    background-color: white;\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n    &.selected {\n      background-color: rgba(0, 0, 0, 0.2);\n    }\n  }\n}\n\n@keyframes _fade-out {\n  to {\n    opacity: 0;\n  }\n}\n\n@keyframes _fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n","@use 'sass:meta';\n@use 'sass:list';\n@use 'sass:selector';\n\n@use 'util' as *;\n\n/**\n * @param {string} $name The name of the switch\n * @param {...string} $states A list of states the switch can be in\n *\n * Optionally pass content to the mixin that will be applied when a state is not active\n * By default, this is `display: none; pointer-events: none;`\n */\n@mixin switch($name, $states...) {\n  $baseFinalSelector: selector-append(\n    '[data-#{$name}]',\n    \":not([data-#{$name}*='!'])\"\n  );\n\n  @each $state in $states {\n    $finalSelector: selector-append(\n      $baseFinalSelector,\n      \":not([data-#{$name}~='#{$state}'])\"\n    );\n\n    $tokens: str-split($state, '/');\n\n    @if length($tokens) > 1 and nth($tokens, 1) == '' {\n      // State has a leading forward slash that was split to the first token\n      // Remove the first tokena and add the forward slash to the new first token\n      $tokens: list-slice($tokens, 2);\n      $tokens: set-nth($tokens, 1, '/#{nth($tokens, 1)}');\n    }\n\n    $partials: partials($tokens);\n    @each $partial in $partials {\n      $finalSelector: selector.append(\n        $finalSelector,\n        \":not([data-#{$name}~='^#{$partial}'])\"\n      );\n    }\n\n    &[data-#{$name}-state='#{$state}'] {\n      /**\n       * Hide any elements with the data-$name attribute that has the '!$state' exclusionary syntax\n       * in its value\n       */\n      [data-#{$name}~='!#{$state}'],\n\n      /**\n       * If any elements with the data-$name attribute does not have $state in its value, nor is\n       * the value using the exclusionary syntax, then hide it\n       */\n      #{$finalSelector} {\n        @if (content-exists()) {\n          // Let mixin consumer override default inactive state styles\n          @content;\n        } @else {\n          display: none;\n          pointer-events: none;\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {string} $name The name of the switch\n * @param {...string} $states A list of states for which the given styles should be applied\n */\n@mixin switchChild($name, $states...) {\n  $selectors: '';\n  @each $state in $states {\n    $selectors: $selectors + \"[data-#{$name}-state='#{$state}'] &,\";\n  }\n\n  @if $selectors != '' {\n    #{$selectors} {\n      @content;\n    }\n  }\n}\n"],"sourceRoot":""}